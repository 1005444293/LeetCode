/**
 * 比特位计数:给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。
 * 输入: 2
 * 输出: [0,1,1]
 *
 * 输入: 5
 * 输出: [0,1,1,2,1,2]
 * 思路：利用位运算，对于位置i的元素，i & (i - 1)可以去掉i最右边的一个1（如果有），因此 i & (i - 1）是比 i 小的，
 *      而且i & (i - 1)的1的个数已经在前面算过了，所以i的1的个数就是 i & (i - 1)的1的个数加上1
 */
public class LC338_比特位计数 {
    public int[] countBits(int n) {
        int[] res = new int[n+1];
        res[0] = 0;
        //i要从1开始，0不符合规则
        for (int i=1; i<=n; i++){
            //此处用递归的思想完成每个位置元素的二进制中1的个数的判断
            res[i] = res[i & (i-1)] + 1;
        }
        return res;
    }
}
